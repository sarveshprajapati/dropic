{"version":3,"sources":["firebase/config.js","hook/useFirestore.js","components/ImageGrid.js","components/Model.js","components/Title.js","hook/useStorage.js","components/ProgressBar.js","components/UploadForm.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","appStorage","storage","appFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelected","console","log","className","map","onClick","downloadUrl","src","alt","Modal","selected","e","target","classList","contains","Title","action","useStorage","file","progress","setProgress","error","setError","url","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","issuedAt","add","ProgressBar","setFile","style","width","UploadForm","types","type","onChange","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65d32a32.chunk.js","sourcesContent":["// Your web app's Firebase configuration\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBoOg_iluqNG4U0chBkW3dA9gWhxF9PyEE\",\r\n  authDomain: \"dropic-60094.firebaseapp.com\",\r\n  projectId: \"dropic-60094\",\r\n  storageBucket: \"dropic-60094.appspot.com\",\r\n  messagingSenderId: \"775705320884\",\r\n  appId: \"1:775705320884:web:60c572d09cae76afbc26e1\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst appStorage = firebase.storage();\r\nconst appFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { appStorage, appFirestore, timestamp };","import {useEffect,useState} from 'react';\r\nimport { appFirestore } from '../firebase/config';\r\n\r\nconst useFirestore = (collection) => {\r\n    const [ docs, setDocs] = useState([]);\r\n    useEffect(()=>{\r\n        appFirestore.collection(collection)\r\n        .orderBy('issuedAt','desc')\r\n            .onSnapshot((snap)=>{\r\n                let documents = [];\r\n                snap.forEach(doc=>{\r\n                    // console.log(doc.data());\r\n                    documents.push({...doc.data(),id:doc.id})\r\n                });\r\n                setDocs(documents);\r\n            }); \r\n        \r\n    },[collection])\r\n\r\n    return {docs} \r\n}\r\n\r\nexport default useFirestore;\r\n","import React from 'react';\r\nimport useFirestore from '../hook/useFirestore';\r\n\r\nconst ImageGrid = ({setSelected}) => {\r\n    const {docs} = useFirestore('images');\r\n    console.log(docs);\r\n    return (\r\n        <div className=\"img-grid\" >\r\n            {docs && docs.map(doc=>(\r\n                <div className='img-wrap' key={doc.id} onClick={()=>setSelected(doc.downloadUrl)}>\r\n                    <img src={doc.downloadUrl} alt='img'></img>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageGrid\r\n","import React from 'react'\r\n\r\nconst Modal = ({selected,setSelected}) => {\r\n    const clickHandler = (e)=>{\r\n        if(e.target.classList.contains('backdrop')){\r\n            setSelected(null);\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"backdrop\" onClick={clickHandler} >\r\n            <img src={selected} alt='img' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react'\r\n\r\nconst Title = () => {\r\n    return (\r\n        <div className=\"title\">\r\n            <h1>Dropic</h1>\r\n            <form action=\"\"></form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title\r\n","import { useEffect, useState } from 'react';\r\nimport { appStorage, appFirestore, timestamp } from '../firebase/config';\r\n\r\nconst useStorage = (file) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [url, setUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const storageRef = appStorage.ref(file.name);\r\n        const collectionRef = appFirestore.collection('images');\r\n        storageRef.put(file).on('state_changed', (snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage);\r\n        },(err)=>setError(err),\r\n        async ()=>{\r\n            const downloadUrl = await storageRef.getDownloadURL();\r\n            const issuedAt = timestamp();\r\n            collectionRef.add({downloadUrl, issuedAt})\r\n            setUrl(downloadUrl);\r\n        })\r\n    }, [file]);\r\n\r\n    return {progress,url,error};\r\n}\r\n\r\nexport default useStorage;\r\n","\r\nimport { useEffect } from 'react';\r\nimport useStorage from '../hook/useStorage';\r\n\r\nconst ProgressBar = ({file ,setFile}) => {\r\n    const {url,progress} = useStorage(file);\r\n    console.log(progress,url);\r\n    useEffect(()=>{\r\n        if(url){\r\n            setFile(null);\r\n        }\r\n    },[url,setFile])\r\n    return (\r\n        <div className=\"progress-bar\" style={{width:progress+'%'}} ></div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar;","import React, { useState } from 'react'\r\nimport ProgressBar from './ProgressBar';\r\n\r\nconst UploadForm = () => {\r\n    const [file, setFile] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const types = ['image/jpg', 'image/png', 'image/jpeg']\r\n    const changeHandler = (e) => {\r\n        let selected = e.target.files[0];\r\n        // console.log(selected);\r\n        // selected && types.includes(selected.type) ? setFile(selected) : setFile(null);\r\n        if (selected && types.includes(selected.type)) {\r\n            setFile(selected);\r\n            setError(null);\r\n        } else {\r\n            setFile(null);\r\n            setError('Seleted a jpeg/png file !');\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <form className=\"upload-form\" action=\"\">\r\n                <button>+</button>\r\n                <input type=\"file\" onChange={changeHandler} />\r\n            </form>\r\n            <div className=\"output\">\r\n                {error && <div className=\"error\">{error}</div>}\r\n                {/* {file && <div className=\"file\">{file.name}</div>} */}\r\n                {file && < ProgressBar file={file} setFile={setFile} />}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UploadForm\r\n","import { useState } from 'react';\nimport './App.css';\nimport ImageGrid from './components/ImageGrid';\nimport Modal from './components/Model';\nimport Title from './components/Title';\nimport UploadForm from './components/UploadForm';\n\n\nfunction App() {\n  const [selected,setSelected]=useState(null);\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm/>\n      <ImageGrid setSelected={setSelected} />\n      {selected && <Modal selected={selected} setSelected={setSelected} />}\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}